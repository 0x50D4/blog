[ { "title": "PicoCTF 2023 - PowerAnalysis: Part 1", "url": "/blog/posts/pico-power-1/", "categories": "PicoCTF2023", "tags": "Cryptography", "date": "2023-04-10 01:00:00 +0200", "snippet": "Here is the description of the challenge:Before this I knew nothing about cryptography basically, and had no idea what power analysis was so I knew this is going to be a hard one. So I did what eve...", "content": "Here is the description of the challenge:Before this I knew nothing about cryptography basically, and had no idea what power analysis was so I knew this is going to be a hard one. So I did what everyone would do in this case, looked up power analysis, what it is, how it works.One of the things I found was this link, this pretty much explains what power analysis is, basically, when encrypting something with AES, the power consumption is different when it does different tasks, and we can figure out what keys it uses for encryption. This requires us to have a lot of data. In any other case, we would need an oscilloscope, but in this case, we can just retrieve data from the instance we can launch. So, we have two tasks retrieve enough data for power analysis somehow do power analysisIf we want to do power analysis, we need to figure out in what format we have to save the data, and since there is no way I’m writing a script myself for power analysis, let’s find one, hopefully in python.I found this link which is a writeup of another CTF, containing a script named power.py, which does exactly what we need, here is how it looks:# source: https://github.com/newaetech/chipwhisperer-jupyter/blob/master/courses/sca101/SOLN_Lab%204_2%20-%20CPA%20on%20Firmware%20Implementation%20of%20AES.ipynbimport numpysbox = [\t0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, \t0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, \t0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, \t0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, \t0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, \t0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, \t0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, \t0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, \t0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, \t0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, \t0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, \t0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, \t0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, \t0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, \t0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, \t0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]def aes_internal(inputdata, key):\treturn sbox[inputdata ^ key]HW = [bin(n).count(\"1\") for n in range(0, 256)]def mean(X):\treturn numpy.sum(X, axis=0)/len(X)def std_dev(X, X_bar):\treturn numpy.sqrt(numpy.sum((X-X_bar)**2, axis=0))def cov(X, X_bar, Y, Y_bar):\treturn numpy.sum((X-X_bar)*(Y-Y_bar), axis=0)textin_array = numpy.load(\"textin_array.npy\")trace_array = numpy.load(\"trace_array.npy\")t_bar = numpy.sum(trace_array, axis=0)/len(trace_array)o_t = numpy.sqrt(numpy.sum((trace_array - t_bar)**2, axis=0))key = [0] * 16for bnum in range(0, 16):\tmaxcpa = [0] * 256\tfor kguess in range(0, 256):\t\thws = numpy.array([[HW[aes_internal(textin[bnum],kguess)] for textin in textin_array]]).transpose()\t\thws_bar = mean(hws)\t\to_hws = std_dev(hws, hws_bar)\t\tcorrelation = cov(trace_array, t_bar, hws, hws_bar)\t\tcpaoutput = correlation/(o_t*o_hws)\t\tmaxcpa[kguess] = max(abs(cpaoutput))\tkey[bnum] = numpy.argmax(maxcpa)\tprint(f\"found byte {bnum}\")print()print(f\"key: {''.join(f'{b:02x}' for b in key)}\")Kinda a lot to take in, but we don’t have to understand everything to make this work. What we need is somehow figure out how to make our data so it can be used by this script. We can see that is uses numpy which is a python library used for quick access of data for example. Here is the line we are concerned about:textin_array = numpy.load(\"textin_array.npy\")trace_array = numpy.load(\"trace_array.npy\")So, let’s download the two files in the example and let’s see what kind of data is it, let’s try using cat:❯ cat trace_array.npy �NUMPYv{'descr': '&lt;i8', 'fortran_order': False, 'shape': (500, 2666), } �rfS2MEX7Wml[aW^5VU^K&lt;(!\"984#*\\uC@XSO,ISxcdMvW\\&lt;bj����tZ:5&gt;JA,)EZ_Ugt�SonlQ'VIJ&amp;(6JD`hgU2RDON`vhnM]Ti]&gt;LYzmrbJTUmgylYO=QV}U?1c[f;@:U^=6XbN@by�WZNR6 ?i��^:1&lt;lqp[;.5@fT{Ra[svar�sfGcLmfu^W]Snz��x]=42-9QN&lt;@Y���\\KTbp���vpa~���~g&gt;On��j�gvQzZmiol]z���hZDVl�lR&lt;JM]reePgt��T9&gt;q�}TTVW9Xjr?%\"&amp;15NP`h�p|~���������������������������������������������������������������������������������������������������������zs��������v�������z������������������������z����������|������������������`Qo����������l���|����������������x�������������������������� [...]Well, this is not really useful. Let’s try loading it and printing it out with python instead.❯ python3 Python 3.10.10 (main, Mar 5 2023, 22:26:53) [GCC 12.2.1 20230201] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import numpy&gt;&gt;&gt; trace_array = numpy.load(\"trace_array.npy\")&gt;&gt;&gt; print(trace_array)[[143 127 114 ... 250 227 228] [103 66 40 ... 259 271 194] [142 139 116 ... 141 200 244] ... [105 89 107 ... 207 208 231] [ 70 72 71 ... 251 227 273] [116 127 106 ... 199 226 236]]npy files are actually so called 2 dimensional arrays, when we ask python to print it, it doesn’t print the whole thing, it only prints the starts and ends of the arrays, and only the first and last 3 ones. So, what did we learn with this? well, we will need to make a 2d array and convert it to npy somehow.So this is useful, but we still need to somehow get the data that we can convert someohw, let’s look at what our instance does:❯ nc saturn.picoctf.net 50306Please provide 16 bytes of plaintext encoded as hex: Pretty straigh forward, let’s see what it does if we do this:❯ nc saturn.picoctf.net 50306Please provide 16 bytes of plaintext encoded as hex: 61616161616161616161616161616161power measurement result: [88, 70, 97, 106, 146, 159, 139, 112, 106, 122, 142, 146, 131, ... 207, 156, 162, 169, 132, 143, 187, 239, 280, 312, 299, 291, 264, 228, 233, 241, 272, 227, 225, 193, 221, 242, 263, 263, 181, 207, 188, 204, 159, 197, 212, 215]we can see it returns a loooong array of numbers, (the dots are included by me, the returned array is much longer).Now that we know how we get the data and what we have to turn it into, let’s write a script:import randomimport stringimport reimport numpyfrom pwn import *Let’s import everything we might need, we will see where we use these things. We could use sockets to connect to the server but it’s easier with pwn.We have 2 arrays that we will need, one for the input text, and one for the array that we get:main_trace_array = []main_input_array = []letters = string.ascii_lettersip = \"saturn.picoctf.net\"port = int(input(\"Port: \"))first we get all the letters that we will randomly choose from for out inputs, then, since the ip is always the same we can just hardcode the domain name there, and since the port is changing we can ask that from the user to input.for _ in range(0, 500): rand_string = ''.join(random.choice(letters) for i in range(16)) int_list = [] for x in rand_string: int_list.append(int(ord(x))) conn = remote(ip, port) conn.recv() rand_string = rand_string.encode(\"utf-8\").hex() bytes_string = bytes(rand_string, 'utf-8') conn.sendline(bytes_string) answer = conn.recvall(timeout=3.5) conn.close() trace_list = [] trace_string = re.findall(\"([0-9]+)\", str(answer)) for x in trace_string: trace_list.append(int(x)) main_trace_array.append(trace_list) main_input_array.append(int_list)Then comes the loop, we will do this 500 times, so we get enough traces.We first make a random string, then we convert the string into an array of the integer representation of the characters.Then we just connect to the instance.We convert the string to a bytes string, then we send it, with a timeout of 3.5 to recieve everything, then we close the connection.We extract the integers with regex, and append it to the trace_list one by one, and when we are done with that, append the trace_list to the main_trace_array, basically creating an array inside an array.When the loop is done, we just save the results into a numpy file:numpy.save(\"trace_array.npy\", main_trace_array)numpy.save(\"textin_array.npy\", main_input_array)so, we just have to run this to gather data, and when that’s done, we can just run power.py and see if it worked:❯ python3 power.py found byte 0found byte 1found byte 2found byte 3found byte 4found byte 5found byte 6found byte 7found byte 8found byte 9found byte 10found byte 11found byte 12found byte 13found byte 14found byte 15key: d3a5641a039fd87871f417094257285fAs stated in the challenge description we have to submit the key like this: picoCTF{key}, and we are done." }, { "title": "PicoCTF 2023 - Specialer", "url": "/blog/posts/pico-specialer/", "categories": "PicoCTF2023", "tags": "Linux", "date": "2023-04-05 01:00:00 +0200", "snippet": "In specialer, we get given an instance that we have to ssh into, so let’s do that:ssh -p &lt;port&gt; ctf-player@saturn.picoctf.net and use the given password.We get a command line where we can try...", "content": "In specialer, we get given an instance that we have to ssh into, so let’s do that:ssh -p &lt;port&gt; ctf-player@saturn.picoctf.net and use the given password.We get a command line where we can try typing commands, so let’s try a few things:Specialer$ ls-bash: ls: command not foundSpecialer$ /bin/bashSpecialer$ ../../../../bin/bashSpecialer$ /bin/bsdlkfjsldkjflksdjfbash: /bin/bsdlkfjsldkjflksdjf: No such file or directorySpecialer$ /bin/lsbash: /bin/ls: No such file or directorySpecialer$ /bin/bashSpecialer$ /bin/shbash: /bin/sh: No such file or directoryI also tried other commands but non seem to really work, we only seem to have bash on this system. How do we find the flag then?We can check this site to see the built in commands in bash, and we can see, that amongst other things, we have access to echo, but what can we use echo for?First we have to find the file the flag is in, so let’s try to do something like the command ls just with echo.Well, it turns out if we type echo * it lists all the folders in the current directory, since the asterisk returns all matching file names, and since * means everything, it returns everything, then echo just outputs it to the command line. So let’s try that:Specialer$ echo *abra ala simGreat! We can see that we have 3 directories, abra, ala and sim, let’s try looking inside of those too, we can do this by typing the folder name, then a slash with an asterisk after it like so: echo folder/*. So let’s try it:Specialer$ echo abra/*abra/cadabra.txt abra/cadaniel.txtSpecialer$ echo ala/*ala/kazam.txt ala/mode.txtSpecialer$ echo sim/*sim/city.txt sim/salabim.txtWe can probably guess that the flag is in one of these files, but we have to somehow print out the contents of the file first.Based on this stackexchange post, we can just use echo \"$(&lt;file.txt)\" to print out the contents of a file. So let’s see if it works:Specialer$ echo \"$(&lt;ala/mode.txt)\"Yummy! Ice cream!Specialer$ echo \"$(&lt;ala/kazam.txt )\"return 0 picoCTF{ find the flag yourself ;) }aaand we got the flag. I was lucky choosing the right folder first. But why does echo \"$(&lt;file.txt)\" work? We know what echo does, with \"$()\" we tell it to perform a command, and it gives back the output as if the user typed in a the text, and with &lt; we just perform input redirection, similar to when you for example push the output of a command to a file, just in reverse." }, { "title": "PicoCTF 2023 - Chrono", "url": "/blog/posts/pico-chrono/", "categories": "PicoCTF2023", "tags": "Linux", "date": "2023-04-05 01:00:00 +0200", "snippet": "In chrono we get an instance we have to ssh into, and the task description just asks in what way do we automate a task to run at intervals on a linux server.On linux this is done by so called cronj...", "content": "In chrono we get an instance we have to ssh into, and the task description just asks in what way do we automate a task to run at intervals on a linux server.On linux this is done by so called cronjobs, and one of the files where cron jobs can be found is /etc/crontab, and catting that file we get:picoplayer@challenge:~$ cat /etc/crontab# picoCTF{ find the flag yourself ;) }" }, { "title": "PicoCTF 2023 - Babygame01", "url": "/blog/posts/pico-babygame01/", "categories": "PicoCTF2023", "tags": "Pwn", "date": "2023-04-05 01:00:00 +0200", "snippet": "Babygame01 gave us a game, that we could both run locally and with an instance, that we had to exploit, we got a terminal based game, where we had to move to a place with a character that was a “@”...", "content": "Babygame01 gave us a game, that we could both run locally and with an instance, that we had to exploit, we got a terminal based game, where we had to move to a place with a character that was a “@”, and then we won, but we also had to get the flag, which is the hard partThis is how the game looks, we can move by typing in w a s or d. The challange is, that we somehow have to set the flag variable, that we can see at the top saying: Player has flag: 0 to something, maybe 1? Well, we got the program, let’s look at it in Ghidra!The challange has some hidden commands, that make our lives easier, that we can find here, in the move function:We can see that we have wasd to move, but we also have two other letters, p and l. l just changes our character, @ to something else, that’s not really important now. But if we type p, it calls solve round, and jumps to the finish line instantly, this might be useful if we don’t wanna go back with our flag manually.if (param_2 == 'p') { solve_round(param_3,param_1);}Now let’s look at the check for the flag variable.We can see in the main function, that there is some code that checks if a variable is 0, and if it’s not, it calls the win function:if (local_aa4 != '\\0') { puts(\"flage\"); win(); fflush(stdout);}It only calls this function though, if we already are in the finish, otherwise the execution does not reach this code, meaning we have to change the variable then get into the finish.Let’s look at the win function: local_10 = *(int *)(in_GS_OFFSET + 0x14); __stream = fopen(\"flag.txt\",\"r\"); if (__stream == (FILE *)0x0) { puts(\"flag.txt not found in current directory\"); /* WARNING: Subroutine does not return */ exit(0); } fgets(local_4c,0x3c,__stream); printf(local_4c);we can see that it basically just opens the file flag.txt and prints it out for us.Now that we know all this, how do we change the variable? If we look at the code, the variable is just initialized as 0, and is changed nowhere, meaning we can’t change it a regular way, we need an overflow.Let’s try to spam the letter a for example and see what happens. Let’s try with for example, spamming 442 letter “a”. This number is random, you can make it any size and see what happens.First, we can obviously see that the program crashed, by the[1] 50258 segmentation fault (core dumped) ./gameBut hey, what is that at the top? Player has flag: 46, we can remember it used to be 0, so, what happened? We overflowed a buffer, and overwrote the value of that variable, and since the value we are looking for is any value not zero, this is good for us.Only one problem, the program crashed. We can try making it not crash by using less of the letter “a”, but still enough for it to overwrite the program. This is a case of trial and error, but in the end it turns out we need exactly 369 “a” to overflow the integer but not crash the program, so let’s try that.Running it we can see the program still running, and the value changed, now remember that we can go to the finish line by typing p? Let’s try that!" }, { "title": "Hacking resources", "url": "/blog/posts/resources/", "categories": "Resources", "tags": "resources, hacking", "date": "2022-06-28 21:02:12 +0200", "snippet": " LAST UPDATED: 2022/06/28In this post, I am going to share some resources I found that can be useful for anyone learning cyber security. This post will get updated at times, so now offline resourc...", "content": " LAST UPDATED: 2022/06/28In this post, I am going to share some resources I found that can be useful for anyone learning cyber security. This post will get updated at times, so now offline resources get deleted and new ones I found get added. Feel free to send me a mail or message me on Twitter if you find anything useful you could add to this list.General HackingBookssoldierx, this archive contians some kind of old looking hacking PDFs and TXTs. (2010) and a lot more, for example exploitslira.epac.to, huge list of ethical hacking books, PDFs and suchpeterhuman this website is amazing and I’m gonna spend hours on it, it’s some very old hacking tutorials mostly, but if you go back to the starting page you can see there is a lot more than hacking too. very fun site 10/10.lagout.org, yep even more books, who would have guessed, and yes, this is a lot too.Google Drive Books #1, is a google drive with a lot of cyber security related books.ihatefeds.com, this is a big list of mostly hacking books, this is an old but still maintained and updated website. (nice name lol)please dont hack me, is just another HUGE collection of programming and cyber security books, publicly avaliable.theswissbay, yes, those are a lot of hacking books too, up to 2016.zenk security, from wordlists to hacking PDFs you can find everything herebobylive.com, mostly just hacking books, but less known ones (2021 upload)yeahhub, a github list of cyber security books, fairly recent, all with links to downloads.Google Drive Books #2, this is way larger than the other list and has tons of booksWebsitesPortswigger web security, this site contains labs and learning material from the very known tool’s (burpsuite) makers, portwswigger.Kontra, this site has some very cool graphical showcases of vulnurabilities, most are paid, but there are some free ones.hacers-arise, is a very cool site, where you can find even explanations on how Elliot did hacks in Mr.robot. It’s a blog.How to get started on CTFs, this is a blog on how to get started with doing CTFsReverse Engineering / Malware developmentLinux Reversing Beginners, on this site you can find a short guide on reverse engineering Linux programs, aimed at CTF challanges.How to start RE, a simple guide on what you need if you want to learn reverse engineering.malwareunicorn, a website with a lot of tutorials on reversing, it even includes costum VMs!micro corruption, is a very nice game where you can learn to reverse engineer, it is all browser based so you don’t even have to leave you browser.VX Heaven, I am not compleatly sure what this website is, but it’s about malware development and has some very cool articles.Windows AV bypass very short and simple examples on bypassing the windows anti virus.crackmes, a simple site where you can download executables that you have to reverse and crack.challenges.re, is site where you can find reverse engineering challenges, kinda old but still nice.reversinghero, a cool looking reverse engineering game.Games / labsXSS Game, is a game about finding XSS vulnurabilities. It has hints, and you can also view the code of your target to analyze it and find vulnurabilites. It has 6 levels so it’s not that long.TheBlackSide, is a french CTF style website with 69 (nice) rooms.overthewire, very nice wargames, mostly focused on linux, I suggest doing all the levels in Bandit for all beginners!HackTheBox, ah yes, one of the biggest platforms when it comes to hacking labs and such. It’s an amazing platform, with a lot of rooms, challanges and an amazing community.TryHackMe, a huge platform, with more CTF like rooms, and educational rooms, a lot of labs are free, but there are a lot others that are not. I suggest you start doing rooms and decide later if you want to pay for it.Hackthissite, this is a very cool website where you can learn of basic website hacking, they even have a challange where you can try to hack the actual website itself! It is very fun to try hack through more and more levels.PicoCTF, is a very beginner friendly CTF platform, with mostly CTFs that are easy and you just have to download a file for them for example. It’s great for setting you up for real CTF challanges, they even have their own CTF even once a year!Ringzer0 ctf, this site has a lot of CTF challanges too, as of writing 358 challanges are up to play.vulnhub, this one is a little different, you can download vulnurable VMs here and try exploiting them, but you don’t do this online, because they don’t have to use as much bandwith, this platform offers free rooms. A lot of them.DVWA, Damn Vulnerable Web Application is a single server that you can run with a LOT of vulnurabilities, so you can try yourself at exploiting as much as you can find.OWASP Juice Shop, another pretty vulnurable web application, that has tons of ways it can be exploited, and it even has a tracker in the page showing how many things you have found and how many are left.greyhackgame, is more of a fun game than actual educational but it has some cool terminal action and “realistic” hacking.PentesterLab, this site is similiar to platforms like THM and HTB, you have some free rooms but most are payed, and you have to exploit the machine, pretty fun if I do say so myself.opentoall, if you are searching for a CTF team, opentoall has you back.pwnable.kr, is a CTF like challange site, while you should mostly consider it as a game, you can also learn with it.w3challs, is a website where you can learn about practical hacking by trying to complete challanges.ctftime, on this website you can see a lot of upcoming and running CTFs that you can attend with your team!pwnable.tw, is a wargame site for hackers to test and expand their binary knowledge.CTF learn, a beginner friendly way to get started with CTFs.Root-me, a very nice way to learn how to hack and develop new skills in hacking, by doing hands on, with a lot of challanges and used by tons of companies.game of hacks, on this site, you are given a vulnurable code snippet in the language of your choice, and you have to decide what kind of vulnurability is in it.DefendTheWeb (formerly HackThis!!), is a site mainly aimed at new comers, to learn cyber security, with 60+ hacking levels and articles.HBH, hell bound hackers is a huge non-profit community/site aimed at teaching everyone who is interested cyber security.Cryptopals, simple cryptographycal challanges for beginners, where you have to write crypto programs. (not that kinda crypto).CTF challange, is a simple website with 12 realistic we applications with 78 flags.CTF365 is a very cool concept awarded by a lot of companies such as Tmobile and Kaspersky. You have to set up your own server, try to defend it, while also trying to hack other peoples servers.reversing.kr, is a site where you can try to crack some programs, it seems to be kind of abandoned now, but you can still try everything.smash the stack, very few old but cool wargames to try.cryptohack.org, a fun way to learn modern cryptographical exploitsexploit.education, helps you learn about exploit development, vulnurability analysis etc.hackertest, little challanges where you can try to hack a web app.halls of valhalla, a simple not so good looking site, with a lot of cool challanges.Other listsCTF Sites, is a website full of CTF platforms, for beginners and advanced hackers.infocon, is a site with a lot of saved talks from different conferences such as DEFCON and BlackHat.odcrawler, this is an amazing site that lets you crawl through thousand upon thousands of files saved.hacking multireddit, this is just a collection of hacking subreddits, if you want to add something, just shoot me a mail." }, { "title": "The beginning", "url": "/blog/posts/introduction/", "categories": "Personal", "tags": "", "date": "2022-06-25 10:02:12 +0200", "snippet": "Welcome to my blogHey, this is my first post which is pretty much just here to test if everything is working alright or not. I am planning on posting more in the future, probably starting with some...", "content": "Welcome to my blogHey, this is my first post which is pretty much just here to test if everything is working alright or not. I am planning on posting more in the future, probably starting with some TryHackMe write ups. I am looking forward to writing blogposts because they are a learning experience for me too." } ]
